{
	"info": {
		"_postman_id": "0df022f1-9bdc-4468-9105-f0231040c348",
		"name": "Api tests",
		"description": "# About this collection\n\nPostman allows you to test your APIs using simple Javascript code. You can evaluate your response body, headers, cookies, and more using the [ChaiJS BDD](https://www.chaijs.com/api/bdd/) syntax.\n\nThis collection guides you through the process of setting up an integration test to ensure that all individual components of an API function together seamlessly.\n\nThe API under test in this collection includes three endpoints for registering and receiving a token, accessing your unique generated name, and unregistering a token:\n\n- POST `/register`\n- POST `/unregister`\n- GET `/my-name`\n    \n\nBy setting up requests in the order of the operation, we can test the flow of data to and from the endpoints and ensure they work together as expected. We also verify that the data persists between requests on the back end.\n\n## **Using this collection**\n\n**Step 1:** Check out the requests' documentation to learn more about -\n\n- what each request is meant to do.\n- the tests we've added against each one.\n    \n\n**Step 2:** Run this collection by clicking on \"Run\".\n\n<img src=\"https://content.pstmn.io/84019b0f-69c8-4c5f-98b9-2c90a6f9a0b1/Y29sbGVjdGlvbi1ydW5uZXItYnV0dG9uLmpwZWc=\" width=\"266\" height=\"103\">\n\n**Step 3:** To customize this collection, replace the request URLs with your API endpoints and add or edit the tests if needed.\n\n## Resources\n\n[Scripting in Postman](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)\n\n[Test script examples](https://learning.postman.com/docs/writing-scripts/script-references/test-examples/)\n\n[Postman Sandbox API reference](https://learning.postman.com/docs/sending-requests/grpc/postman-sandbox-api/#writing-assertions)\n\n[Using the Collection Runner](https://learning.postman.com/docs/collections/running-collections/intro-to-collection-runs/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23907954"
	},
	"item": [
		{
			"name": "Get random joke",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"     pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"Response has setup, punchline, type and id properties\", function(){",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"setup\");",
							"    pm.expect(jsonData).to.have.property(\"punchline\");",
							"    pm.expect(jsonData).to.have.property(\"type\");",
							"    pm.expect(jsonData).to.have.property(\"id\");",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/jokes/random",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"jokes",
						"random"
					]
				},
				"description": "Get random joke"
			},
			"response": []
		},
		{
			"name": "Get joke by id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let randomId = Math.floor(Math.random() * 100) + 1;",
							"",
							"pm.variables.set(\"randomId\", randomId)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function (){",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"pm.test(\"Response has correct format\", function(){",
							"    const jsonData = pm.response.json();",
							"",
							"    const requestedId = pm.variables.get(\"randomId\")",
							"",
							"    pm.expect(jsonData).to.have.property(\"setup\");",
							"    pm.expect(jsonData).to.have.property(\"punchline\");",
							"    pm.expect(jsonData).to.have.property(\"type\");",
							"    pm.expect(jsonData.id).to.equal(requestedId);",
							"})",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/jokes/{{randomId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"jokes",
						"{{randomId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get random joke with general type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array with one general joke\", function() {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an(\"array\");",
							"    pm.expect(jsonData.length).to.equal(1); ",
							"    pm.expect(jsonData[0]).to.have.property(\"type\", \"general\");",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/jokes/general/random",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"jokes",
						"general",
						"random"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get ten jokes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array with ten jokes\", function() {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an(\"array\");",
							"    pm.expect(jsonData.length).to.equal(10); ",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/jokes/ten",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"jokes",
						"ten"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get response with error message",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response contains error message\", function() {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"type\", \"error\");",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/jokes/9938",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"jokes",
						"9938"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get random joke with programming type",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array with one programming joke\", function() {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an(\"array\");",
							"    pm.expect(jsonData.length).to.equal(1); ",
							"    pm.expect(jsonData[0]).to.have.property(\"type\", \"programming\");",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/jokes/programming/random",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"jokes",
						"programming",
						"random"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get ten programming jokes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array with ten programming jokes\", function() {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an(\"array\");",
							"    pm.expect(jsonData.length).to.equal(10); ",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/jokes/programming/ten",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"jokes",
						"programming",
						"ten"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get ten general jokes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array with ten general jokes\", function() {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an(\"array\");",
							"    pm.expect(jsonData.length).to.equal(10); ",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/jokes/general/ten",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"jokes",
						"general",
						"ten"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get joke types",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array with at least one type and each type is a string\", function() {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an(\"array\");",
							"    pm.expect(jsonData.length).to.be.greaterThan(0); ",
							"    jsonData.forEach(type => {",
							"        pm.expect(type).to.be.a(\"string\");",
							"    })",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/types",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"types"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete method is not supported",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let randomId = Math.floor(Math.random() * 100) + 1;",
							"",
							"pm.variables.set(\"randomId\", randomId)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Delete method is not supported\", function (){",
							"    pm.response.to.have.status(404)",
							"})",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/jokes/{{randomId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"jokes",
						"{{randomId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": "https://postman-integration-testing.glitch.me/"
		}
	]
}